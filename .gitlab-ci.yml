stages:
  - plan
  - apply
  - destroy

image:
  name: hashicorp/terraform:latest
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'


before_script:
  - rm -rf .terraform
  - terraform --version
  - apk add ansible aws-cli py3-boto3 py3-botocore jq
  - terraform init -backend-config="bucket=$BUCKET_NAME" -backend-config="key=$CI_COMMIT_REF_NAME/terraformstatefile-$CI_COMMIT_REF_NAME"

plan: 
  stage: plan
  script: 
    - terraform plan -var="environment=$CI_COMMIT_REF_NAME" -var="public_key=$PUBLIC_KEY"

apply: 
  stage: apply
  script:
    - terraform apply -var="environment=$CI_COMMIT_REF_NAME" -var="public_key=$PUBLIC_KEY" --auto-approve
    - IP_ADDRESS_MAIN=$(terraform output -raw Jenkins-Main-Node-Public-IP)
    - IP_ADDRESS_WORKER=$(terraform output -json Jenkins-Worker-Public-IPs | jq -r '.[]')
    - echo "IP_ADDRESS_MAIN=$IP_ADDRESS_MAIN"
    - echo "IP_ADDRESS_WORKER=$IP_ADDRESS_WORKER"
    - ansible-playbook -i "{{ IP_ADDRESS_MAIN }}," --private_key $PRIVATE_KEY ansible_templates/jenkins-master-sample.yml
    - ansible-playbook -i "{{ IP_ADDRESS_WORKER }}," --private_key $PRIVATE_KEY ansible_templates/jenkins-worker-sample.yml
  dependencies: 
    - plan

destroy:
  stage: destroy
  script:
    - terraform destroy -var="environment=$CI_COMMIT_REF_NAME" -var="public_key=$PUBLIC_KEY" --auto-approve
  dependencies: 
    - apply 
  when: manual